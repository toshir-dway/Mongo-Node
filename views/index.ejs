<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NeighborAlert - Carte</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
    }
    header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 20px;
    }
    h1 {
      margin: 0;
    }
    #map {
      height: 60vh;
      width: 100%;
      margin-bottom: 20px;
      border-radius: 8px;
    }
    .forms-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
    }
    @media (max-width: 768px) {
      .forms-container {
        grid-template-columns: 1fr;
      }
    }
    .form-card {
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 20px;
      background-color: #f9f9f9;
    }
    .form-card h2 {
      margin-top: 0;
      color: #333;
      border-bottom: 2px solid #ddd;
      padding-bottom: 10px;
    }
    form {
      display: flex;
      flex-direction: column;
    }
    input, select, button {
      margin-bottom: 10px;
      padding: 8px;
      border-radius: 4px;
      border: 1px solid #ddd;
    }
    button {
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
      padding: 10px;
      font-weight: bold;
    }
    button:hover {
      background-color: #45a049;
    }
    .coordinates-display {
      font-size: 0.9em;
      margin-bottom: 10px;
      color: #666;
    }
    .alert-form button {
      background-color: #f44336;
    }
    .alert-form button:hover {
      background-color: #d32f2f;
    }
    .instructions {
      background-color: #fffde7;
      padding: 10px;
      border-radius: 4px;
      margin-bottom: 20px;
      border-left: 4px solid #ffc107;
    }
    .expiration-badge {
      font-size: 0.8em;
      background-color: #ff9800;
      color: white;
      padding: 2px 6px;
      border-radius: 10px;
      margin-left: 5px;
    }
    .refresh-btn {
      background-color: #2196F3;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 8px 12px;
      cursor: pointer;
      font-size: 0.9em;
    }
    .refresh-btn:hover {
      background-color: #0b7dda;
    }
  </style>
</head>
<body>
  <header>
    <h1>üó∫Ô∏è NeighborAlert</h1>
    <button class="refresh-btn" onclick="location.reload()">üîÑ Actualiser la carte</button>
  </header>
  
  <div class="instructions">
    <p><strong>Comment utiliser :</strong> Cliquez sur la carte pour placer un marqueur et remplir automatiquement les coordonn√©es dans les formulaires.</p>
  </div>
  
  <div id="map"></div>
  
  <div class="coordinates-display" id="coordinates">
    Position actuelle : Cliquez sur la carte pour d√©finir les coordonn√©es
  </div>
  
  <div class="forms-container">
    <div class="form-card">
      <h2>üèôÔ∏è Ajouter un lieu</h2>
      <form id="placeForm">
        <input name="name" placeholder="Nom du lieu" required>
        <input name="description" placeholder="Description" required>
        <input id="place-lat" name="lat" placeholder="Latitude" required>
        <input id="place-lng" name="lng" placeholder="Longitude" required>
        <select name="type">
          <option value="adresse">Bonne adresse</option>
          <option value="evenement">√âv√©nement communautaire</option>
        </select>
        <button type="submit">Ajouter ce lieu</button>
      </form>
    </div>
    
    <div class="form-card alert-form">
      <h2>‚ö†Ô∏è Signaler une alerte</h2>
      <form id="alertForm">
        <input name="title" placeholder="Titre de l'alerte" required>
        <input name="description" placeholder="Description" required>
        <input id="alert-lat" name="lat" placeholder="Latitude" required>
        <input id="alert-lng" name="lng" placeholder="Longitude" required>
        <select name="type">
          <option value="danger">Danger</option>
          <option value="travaux">Travaux</option>
          <option value="autre">Autre</option>
        </select>
        <label for="duration">Dur√©e de l'alerte:</label>
        <select id="duration" name="duration">
          <option value="1">1 jour</option>
          <option value="3">3 jours</option>
          <option value="7" selected>1 semaine</option>
          <option value="14">2 semaines</option>
          <option value="30">1 mois</option>
        </select>
        <button type="submit">Signaler cette alerte</button>
      </form>
    </div>
  </div>

  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script>
    // Initialize the map
    const map = L.map('map').setView([45.16, 5.71], 12); // Grenoble center
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);
    
    // Variables to store current marker position
    let currentMarker = null;
    let currentLat = null;
    let currentLng = null;
    
    // Reference to form fields
    const placeLat = document.getElementById('place-lat');
    const placeLng = document.getElementById('place-lng');
    const alertLat = document.getElementById('alert-lat');
    const alertLng = document.getElementById('alert-lng');
    const coordDisplay = document.getElementById('coordinates');
    
    // Format date function
    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('fr-FR');
    }
    
    // Calculate remaining days
    function getRemainingDays(expiresAt) {
      const now = new Date();
      const expiry = new Date(expiresAt);
      const diffTime = Math.abs(expiry - now);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      return diffDays;
    }
    
    // Load existing places
    fetch('/api/places')
      .then(res => res.json())
      .then(data => {
        data.forEach(place => {
          const lat = place.location ? place.location.coordinates[1] : place.lat;
          const lng = place.location ? place.location.coordinates[0] : place.lng;

          const marker = L.marker([lat, lng])
            .addTo(map)
            .bindPopup(`
              <b>${place.name}</b><br>${place.description}<br>
              <button onclick="deletePlace('${place._id}')">üóëÔ∏è Supprimer</button>
              <button onclick="editPlace('${place._id}', '${place.name}', '${place.description}', ${lat}, ${lng}, '${place.type}')">‚úèÔ∏è Modifier</button>
            `);
        });
      })
      .catch(err => console.error('Erreur chargement places:', err));

    // Load existing alerts
    fetch('/api/alerts')
      .then(res => res.json())
      .then(data => {
        data.forEach(alert => {
          const lat = alert.location ? alert.location.coordinates[1] : alert.lat;
          const lng = alert.location ? alert.location.coordinates[0] : alert.lng;
          const alertColor = alert.type === 'danger' ? 'red' : (alert.type === 'travaux' ? 'orange' : 'blue');

          const circle = L.circle([lat, lng], {
            radius: 100,
            color: alertColor,
            fillColor: alertColor,
            fillOpacity: 0.3
          }).addTo(map)
            .bindPopup(`
              <b>${alert.title}</b><br>${alert.description}<br>
              <button onclick="deleteAlert('${alert._id}')">üóëÔ∏è Supprimer</button>
              <button onclick="editAlert('${alert._id}', '${alert.title}', '${alert.description}', ${lat}, ${lng}, '${alert.type}')">‚úèÔ∏è Modifier</button>
            `);
        });
      })
      .catch(err => console.error('Erreur chargement alertes:', err));

    // Delete a place
    function deletePlace(id) {
      if (confirm('√ätes-vous s√ªr de vouloir supprimer ce lieu ?')) {
        fetch(`/api/places/${id}`, { method: 'DELETE' })
          .then(res => {
            if (!res.ok) throw new Error('Erreur lors de la suppression');
            alert('Lieu supprim√© avec succ√®s');
            location.reload();
          })
          .catch(err => alert('Erreur : ' + err));
      }
    }

    // Delete an alert
    function deleteAlert(id) {
      if (confirm('√ätes-vous s√ªr de vouloir supprimer cette alerte ?')) {
        fetch(`/api/alerts/${id}`, { method: 'DELETE' })
          .then(res => {
            if (!res.ok) throw new Error('Erreur lors de la suppression');
            alert('Alerte supprim√©e avec succ√®s');
            location.reload();
          })
          .catch(err => alert('Erreur : ' + err));
      }
    }

    // Edit a place
    function editPlace(id, name, description, lat, lng, type) {
      const newName = prompt('Modifier le nom du lieu', name);
      const newDescription = prompt('Modifier la description', description);
      const newLat = prompt('Modifier la latitude', lat);
      const newLng = prompt('Modifier la longitude', lng);
      const newType = prompt('Modifier le type (adresse/evenement)', type);

      if (newName && newDescription && newLat && newLng && newType) {
        fetch(`/api/places/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            name: newName,
            description: newDescription,
            location: {
              type: 'Point',
              coordinates: [parseFloat(newLng), parseFloat(newLat)]
            },
            type: newType
          })
        })
          .then(res => {
            if (!res.ok) throw new Error('Erreur lors de la modification');
            alert('Lieu modifi√© avec succ√®s');
            location.reload();
          })
          .catch(err => alert('Erreur : ' + err));
      }
    }

    // Edit an alert
    function editAlert(id, title, description, lat, lng, type) {
      const newTitle = prompt('Modifier le titre de l\'alerte', title);
      const newDescription = prompt('Modifier la description', description);
      const newLat = prompt('Modifier la latitude', lat);
      const newLng = prompt('Modifier la longitude', lng);
      const newType = prompt('Modifier le type (danger/travaux/autre)', type);

      if (newTitle && newDescription && newLat && newLng && newType) {
        fetch(`/api/alerts/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            title: newTitle,
            description: newDescription,
            location: {
              type: 'Point',
              coordinates: [parseFloat(newLng), parseFloat(newLat)]
            },
            type: newType
          })
        })
          .then(res => {
            if (!res.ok) throw new Error('Erreur lors de la modification');
            alert('Alerte modifi√©e avec succ√®s');
            location.reload();
          })
          .catch(err => alert('Erreur : ' + err));
      }
    }

    // Handle map clicks
    map.on('click', function(e) {
      // Get coordinates
      currentLat = e.latlng.lat;
      currentLng = e.latlng.lng;
      
      // Update form fields
      placeLat.value = currentLat;
      placeLng.value = currentLng;
      alertLat.value = currentLat;
      alertLng.value = currentLng;
      
      // Update coordinates display
      coordDisplay.innerHTML = `Position s√©lectionn√©e : Latitude ${currentLat.toFixed(6)}, Longitude ${currentLng.toFixed(6)}`;
      
      // Remove existing temp marker if any
      if (currentMarker) {
        map.removeLayer(currentMarker);
      }
      
      // Add new temp marker
      currentMarker = L.marker([currentLat, currentLng]).addTo(map)
        .bindPopup('Position s√©lectionn√©e')
        .openPopup();
    });
    
    // Form submission with fetch API
    document.getElementById('placeForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const name = this.querySelector('[name="name"]').value;
      const description = this.querySelector('[name="description"]').value;
      const lat = parseFloat(this.querySelector('[name="lat"]').value);
      const lng = parseFloat(this.querySelector('[name="lng"]').value);
      const type = this.querySelector('[name="type"]').value;
      
      const data = {
        name,
        description,
        location: {
          type: "Point",
          coordinates: [lng, lat] // GeoJSON format: [longitude, latitude]
        },
        type
      };
      
      console.log('Envoi de donn√©es:', data);
      
      fetch('/api/places', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Erreur r√©seau');
        }
        return response.json();
      })
      .then(data => {
        alert('Lieu ajout√© avec succ√®s!');
        location.reload();
      })
      .catch(error => {
        console.error('Erreur:', error);
        alert('Erreur lors de l\'ajout du lieu');
      });
    });
    
    document.getElementById('alertForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const title = this.querySelector('[name="title"]').value;
      const description = this.querySelector('[name="description"]').value;
      const lat = parseFloat(this.querySelector('[name="lat"]').value);
      const lng = parseFloat(this.querySelector('[name="lng"]').value);
      const type = this.querySelector('[name="type"]').value;
      const duration = parseInt(this.querySelector('[name="duration"]').value);
      
      // Calcule la date d'expiration
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + duration);
      
      const data = {
        title,
        description,
        location: {
          type: "Point",
          coordinates: [lng, lat] // GeoJSON format: [longitude, latitude]
        },
        type,
        expiresAt
      };
      
      console.log('Envoi de donn√©es:', data);
      
      fetch('/api/alerts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Erreur r√©seau');
        }
        return response.json();
      })
      .then(data => {
        alert('Alerte signal√©e avec succ√®s! Elle expirera le ' + formatDate(data.expiresAt));
        location.reload();
      })
      .catch(error => {
        console.error('Erreur:', error);
        alert('Erreur lors du signalement de l\'alerte');
      });
    });
  </script>
</body>
</html>